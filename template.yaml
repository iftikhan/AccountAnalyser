AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"

Parameters:
  MasterAccountId:
    Type: String
    Default: 632616529567
    Description: "VMWare Master Account Id."

  NitifiationEmail:
    Type: String
    Default: "iftik@amazon.com"
    Description: "Email address"

  WhiteListAccounts:
    Type: List<String>
    Description: "White list account number as string"

  WhiteListOrgs:
    Type: List<String>
    Description: "White list Org ids as string"

  LogLevel:
    Type: String
    Default: INFO
    Description: "Logging is set to INFO, Use DEBUG for more logging"

  WaitTime:
    Type: Number
    Default: 21600
    Description: "Waiting time(in seconds) between each phase of step function where human intervention is required"

  DefaultOUId:
    Type: String
    Default: ou-2z89-v1sr51hj
    Description: "Accounts that joined VMWare organization successfully will be moved into this OU."

Resources:
  # IAM Roles
  SpandrelEngineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "S3Policy"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:ListObjects"
                  - "s3:PutObject"
                  - "s3:HeadObject"
                Resource: !Sub "arn:aws:s3:::${SharedResourcesBucket}/*"

        - PolicyName: "SNSTopicAccessPolicy"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - "sns:Publish"
                  - "sns:Subscribe"
                Resource: "*"

        - PolicyName: BasicLambdaAccessPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "ssm:GetParameter"
                  - "support:*"
                  - "states:StartExecution"
                Resource: "*"
        - PolicyName: organizationAndIAMAccessPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "organizations:InviteAccountToOrganization"
                  - "organizations:DescribeAccount"
                  - "organizations:DeleteOrganization"
                  - "organizations:AcceptHandshake"
                  - "organizations:ListHandshakesForOrganization"
                  - "organizations:LeaveOrganization"
                  - "organizations:ListHandshakesForAccount"
                  - "organizations:RemoveAccountFromOrganization"
                  - "organizations:ListAccounts"
                  - "organizations:DescribeOrganization"
                  - "organizations:DescribeHandshake"
                  - "organizations:MoveAccount"
                  - "organizations:ListParents"
                  - "iam:GetRole"
                  - "iam:GetPolicy"
                  - "iam:ListRoles"
                  - "iam:CreateRole"
                  - "iam:AttachRolePolicy"
                  - "iam:PutRolePolicy"
                  - "iam:CreatePolicy"
                  - "iam:PutUserPolicy"
                  - "iam:UpdateRole"
                  - "iam:GetRolePolicy"
                  - "iam:GetAccountSummary"
                  - "sts:AssumeRole"
                  - "access-analyzer:ListAnalyzers"
                  - "access-analyzer:GetFinding"
                  - "access-analyzer:GetAnalyzer"
                  - "access-analyzer:ListFindings"
                  - "access-analyzer:StartResourceScan"
                  - "access-analyzer:CreateAnalyzer"
                Resource: "*"

        - PolicyName: DynamodbPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:BatchGet*"
                  - "dynamodb:Get*"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:BatchWrite*"
                  - "dynamodb:Update*"
                  - "dynamodb:PutItem"
                  - "dynamodb:List*"
                  - "dynamodb:Describe*"
                Resource: !Sub "arn:aws:dynamodb:*:${MasterAccountId}:table/${AccountInfoTable}*"

  # Step function Role
  StepFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "StatesExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                  - "states:StartExecution"
                Resource: "*"

  # S3 bucket
  SharedResourcesBucket:
    Type: AWS::S3::Bucket

  #  #Dynamodb
  #  AccountInfoTable:
  #    Type: AWS::DynamoDB::Table
  #    Properties:
  #      PointInTimeRecoverySpecification:
  #        PointInTimeRecoveryEnabled: "True"
  #      AttributeDefinitions:
  #        - AttributeName: "AccountId"
  #          AttributeType: "S"
  #        - AttributeName: "AccountType"
  #          AttributeType: "S"
  #        - AttributeName: "CompanyName"
  #          AttributeType: "S"
  #      KeySchema:
  #        - AttributeName: "CompanyName"
  #          KeyType: "HASH"
  #        - AttributeName: "AccountId"
  #          KeyType: "RANGE"
  #      LocalSecondaryIndexes:
  #        - IndexName: "AccountType"
  #          KeySchema:
  #            - AttributeName: "CompanyName"
  #              KeyType: "HASH"
  #            - AttributeName: "AccountType"
  #              KeyType: "RANGE"
  #          Projection:
  #            ProjectionType: "ALL"
  #      BillingMode: "PAY_PER_REQUEST"

  #  #Dynamodb Report Table
  #  FindingsTable:
  #    Type: AWS::DynamoDB::Table
  #    Properties:
  #      PointInTimeRecoverySpecification:
  #        PointInTimeRecoveryEnabled: "True"
  #      AttributeDefinitions:
  #        - AttributeName: "resource"
  #          AttributeType: "S"
  #        - AttributeName: "resourceType"
  #          AttributeType: "S"
  #      #        - AttributeName: "CompanyName"
  #      #          AttributeType: "S"
  #      KeySchema:
  #        - AttributeName: "resource"
  #          KeyType: "HASH"
  #        - AttributeName: "resourceType"
  #          KeyType: "RANGE"
  #      #      LocalSecondaryIndexes:
  #      #        - IndexName: "AccountType"
  #      #          KeySchema:
  #      #            - AttributeName: "CompanyName"
  #      #              KeyType: "HASH"
  #      #            - AttributeName: "AccountType"
  #      #              KeyType: "RANGE"
  #      #          Projection:
  #      #            ProjectionType: "ALL"
  #      BillingMode: "PAY_PER_REQUEST"



  # Lambda Layer
  SpandrelEngineDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: scratch/layers/
      RetentionPolicy: Delete

  #  # AE Report lambda
  #  GenerateReport:
  #    Type: AWS::Serverless::Function
  #    Properties:
  #      Handler: "spandrel_engine.reports.lambda_handler"
  #      Runtime: "python3.8"
  #      CodeUri: "./src"
  #      Timeout: 120
  #      Role:  !Sub ${SpandrelEngineRole.Arn}
  #      Layers:
  #        - !Sub ${SpandrelEngineDependenciesLayer}
  #      Environment:
  #        Variables:
  #          TARGET_ACCOUNT_TABLE_NAME: !Sub ${ AccountInfoTable}
  #          SHARED_RESOURCE_BUCKET: !Sub ${ SharedResourcesBucket}
  #          LOG_LEVEL: !Sub ${LogLevel}
  #          WHITE_LISTED_ACCOUNTS: !Sub ${WhiteListAccounts}
  #          WHITE_LISTED_ORGS: !Sub ${WhiteListOrgs}
  #          EMAIL_ADDRESSES: !Sub ${NitifiationEmail}


  Cleanup:
    Type: AWS::Serverless::Function
    Properties:
      Handler: "spandrel_engine.cleanup.lambda_handler"
      Runtime: "python3.8"
      CodeUri: "./src"
      Timeout: 120
      Role:  !Sub ${SpandrelEngineRole.Arn}
      Layers:
        - !Sub ${SpandrelEngineDependenciesLayer}
      Environment:
        Variables:
          LOG_LEVEL: !Sub ${LogLevel}
          WHITE_LISTED_ACCOUNTS: !Sub ${WhiteListAccounts}
          WHITE_LISTED_ORGS: !Sub ${WhiteListOrgs}
          EMAIL_ADDRESSES: !Sub ${NitifiationEmail}







  ## required
  GetActiveRegionLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: "spandrel_engine.active_regions_generator.lambda_handler"
      Runtime: "python3.8"
      CodeUri: "./src"
      Timeout: 120
      Role:  !Sub ${SpandrelEngineRole.Arn}
      Layers:
        - !Sub ${SpandrelEngineDependenciesLayer}
      Environment:
        Variables:
          LOG_LEVEL: !Sub ${LogLevel}
          WHITE_LISTED_ACCOUNTS: !Sub ${WhiteListAccounts}
          WHITE_LISTED_ORGS: !Sub ${WhiteListOrgs}
          EMAIL_ADDRESSES: !Sub ${NitifiationEmail}
  #required
  ActivateAnalyzerLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: "spandrel_engine.activate_analyzer.lambda_handler"
      Runtime: "python3.8"
      CodeUri: "./src"
      Timeout: 120
      Role:  !Sub ${SpandrelEngineRole.Arn}
      Layers:
        - !Sub ${SpandrelEngineDependenciesLayer}
      Environment:
        Variables:
          LOG_LEVEL: !Sub ${LogLevel}
          WHITE_LISTED_ACCOUNTS: !Sub ${WhiteListAccounts}
          WHITE_LISTED_ORGS: !Sub ${WhiteListOrgs}
          EMAIL_ADDRESSES: !Sub ${NitifiationEmail}
  #required
  GetDependentResourcesLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: "spandrel_engine.get_org_dependent_resources.lambda_handler"
      Runtime: "python3.8"
      CodeUri: "./src"
      Timeout: 120
      Role:  !Sub ${SpandrelEngineRole.Arn}
      Layers:
        - !Sub ${SpandrelEngineDependenciesLayer}
      Environment:
        Variables:
          LOG_LEVEL: !Sub ${LogLevel}
          WHITE_LISTED_ACCOUNTS: !Sub ${WhiteListAccounts}
          WHITE_LISTED_ORGS: !Sub ${WhiteListOrgs}
          EMAIL_ADDRESSES: !Sub ${NitifiationEmail}

  # Dependent Resource Finder StepFunction
  #required
  DependentResourceFinder:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub "${AWS::StackName}-DependentResourceFinder"
      RoleArn: !Sub ${StepFunctionExecutionRole.Arn}
      DefinitionString: !Sub |
        {
           "Comment":"VMWare Spandrel engine dependent resource finder",
           "StartAt":"GetActiveRegions",
           "States":{
              "GetActiveRegions":{
                 "Type":"Task",
                 "Resource":"${GetActiveRegionLambda.Arn}",
                 "Next":"ActivateAnalyzer"
              },
              "ActivateAnalyzer":{
                 "Type":"Task",
                 "Resource":"${ActivateAnalyzerLambda.Arn}",
                 "Next":"WaitForAnalyzerScan"
              },
              "WaitForAnalyzerScan": {
                "Type": "Wait",
                "Seconds": 1800,
                "Next": "ScanPolicies"
              },
              "ScanPolicies":{
                 "Type":"Task",
                 "Resource":"${GetDependentResourcesLambda.Arn}",
                 "Next": "CheckScanPoliciesStatus"
              },
              "CheckScanPoliciesStatus":{
              "Type":"Choice",
              "Choices":[
                {
                    "Variable":"$.Status",
                    "StringEquals":"Wait",
                    "Next":"WaitToUpdatePolicies"
                },
                {
                    "Variable":"$.Status",
                    "StringEquals":"Completed",
                    "Next":"FlowCompleted"
                }
              ]
             },
             "WaitToUpdatePolicies": {
                "Type": "Wait",
                "Seconds": ${WaitTime},
                "Next": "ScanPolicies"
             },
             "FlowCompleted":{
              "Type":"Pass",
              "End":true
             }
           }
        }
Outputs:
  SharedResourcesBucketName:
    Value:
      Fn::Sub: ${SharedResourcesBucket}